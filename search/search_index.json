{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"Markdown Docs This repository contains the definition of a Docker image that can be used both as a builder stage and as an action . markdown-docs is implemented as a jam of stuff you don't even need to know about. Just assume that everything is supported until you find that it's not, then submit an issue to add support for even that thing. Only if you really need it. Supported Markdown extensions: WIP Usage You can use markdown-docs both as a GitHub Acton or a Docker builder stage inside your dockerfile. As GitHub Action To use markdown-docs as a GitHub Action, use the following syntax in your workflow: - name : Generate HTML from Markdown uses : ldeluigi/markdown-docs@master with : src : doc dst : generated This means that every markdown file inside the doc folder in the current workspace will be converted and mapped to a corresponding HTML file inside the generated directory. As Docker builder To use markdown-docs as a Docker builder stage use the following syntax in your Dockerfile: FROM deloo/markdown-docs AS builder COPY doc/ /home/src ENV WORKSPACE = /home RUN makedocs \"src\" \"dst\" FROM ... COPY --from = builder /home/dst /var/www/static/ This means that first docker creates a builder container where it runs the /start.sh script, then will copy the resulting, generated HTML files in the production image, specifically in /var/www/static . Documenting your software The idea behind markdown-docs is that all the documentation that can be written in separate files from the code should be mantained like the code documentation, that is thinking about the content and not the appearence. In addition, some of the most important tools for documentation are UML diagrams. In particular, one of the most maintainable way to draw UMLs is PlantUML , which can generate UML diagrams for a text specification. One of the most important features of markdown-docs is the support of PlantUML syntax embedded inside documentation sources, in Markdown.","title":"Markdown Docs"},{"location":"index.html#markdown-docs","text":"This repository contains the definition of a Docker image that can be used both as a builder stage and as an action . markdown-docs is implemented as a jam of stuff you don't even need to know about. Just assume that everything is supported until you find that it's not, then submit an issue to add support for even that thing. Only if you really need it.","title":"Markdown Docs"},{"location":"index.html#supported-markdown-extensions","text":"WIP","title":"Supported Markdown extensions:"},{"location":"index.html#usage","text":"You can use markdown-docs both as a GitHub Acton or a Docker builder stage inside your dockerfile.","title":"Usage"},{"location":"index.html#as-github-action","text":"To use markdown-docs as a GitHub Action, use the following syntax in your workflow: - name : Generate HTML from Markdown uses : ldeluigi/markdown-docs@master with : src : doc dst : generated This means that every markdown file inside the doc folder in the current workspace will be converted and mapped to a corresponding HTML file inside the generated directory.","title":"As GitHub Action"},{"location":"index.html#as-docker-builder","text":"To use markdown-docs as a Docker builder stage use the following syntax in your Dockerfile: FROM deloo/markdown-docs AS builder COPY doc/ /home/src ENV WORKSPACE = /home RUN makedocs \"src\" \"dst\" FROM ... COPY --from = builder /home/dst /var/www/static/ This means that first docker creates a builder container where it runs the /start.sh script, then will copy the resulting, generated HTML files in the production image, specifically in /var/www/static .","title":"As Docker builder"},{"location":"index.html#documenting-your-software","text":"The idea behind markdown-docs is that all the documentation that can be written in separate files from the code should be mantained like the code documentation, that is thinking about the content and not the appearence. In addition, some of the most important tools for documentation are UML diagrams. In particular, one of the most maintainable way to draw UMLs is PlantUML , which can generate UML diagrams for a text specification. One of the most important features of markdown-docs is the support of PlantUML syntax embedded inside documentation sources, in Markdown.","title":"Documenting your software"}]}